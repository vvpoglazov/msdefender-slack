import json
import logging
import os
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta

from ..lib.defender_client import DefenderClient
from ..lib.slack_client import SlackClient
from ..lib.vulnerability_formatter import format_vulnerability
from ..lib.secret_manager import get_secrets

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class Config:
    """Configuration class for vulnerability reporter."""
    
    # Environment Variable Keys
    ENV_SLACK_CHANNEL = 'SLACK_CHANNEL'
    ENV_SEVERITY_FILTER = 'VULNERABILITY_SEVERITY_FILTER'
    ENV_PROJECT_NAME = 'PROJECT_NAME'
    ENV_HOURS_LOOKBACK = 'HOURS_LOOKBACK'
    
    # Defaults
    DEFAULT_SLACK_CHANNEL = 'security-alerts'
    DEFAULT_SEVERITY_FILTER = ['high', 'critical']
    DEFAULT_PROJECT_NAME = 'msdefender-slack'
    DEFAULT_HOURS_LOOKBACK = 24
    
    @classmethod
    def get_slack_channel(cls) -> str:
        """Get Slack channel from environment or default."""
        return os.environ.get(cls.ENV_SLACK_CHANNEL, cls.DEFAULT_SLACK_CHANNEL)
    
    @classmethod
    def get_severity_filter(cls) -> List[str]:
        """Get severity filter list from environment or default."""
        severity_filter_str = os.environ.get(cls.ENV_SEVERITY_FILTER, 
                                            ",".join(cls.DEFAULT_SEVERITY_FILTER))
        return [s.strip().lower() for s in severity_filter_str.split(',') if s.strip()]
        
    @classmethod
    def get_project_name(cls) -> str:
        """Get project name from environment or default."""
        return os.environ.get(cls.ENV_PROJECT_NAME, cls.DEFAULT_PROJECT_NAME)
    
    @classmethod
    def get_hours_lookback(cls) -> int:
        """Get hours lookback from environment or default."""
        try:
            return int(os.environ.get(cls.ENV_HOURS_LOOKBACK, cls.DEFAULT_HOURS_LOOKBACK))
        except ValueError:
            logger.warning(f"Invalid HOURS_LOOKBACK value, using default {cls.DEFAULT_HOURS_LOOKBACK}")
            return cls.DEFAULT_HOURS_LOOKBACK

class VulnerabilityReporter:
    """Main class for fetching and reporting Microsoft Defender vulnerabilities."""
    
    def __init__(self):
        self.secrets = None
        self.slack_client = None
        self.defender_client = None
        self.defender_tenant_id = None
        self.initialized = False
    
    def initialize(self) -> None:
        """Initialize secrets and clients if not already done."""
        if self.initialized:
            return
            
        logger.info("Initializing vulnerability reporter...")
        self.secrets = get_secrets()
        
        # Get tenant ID for DefenderClient
        self.defender_tenant_id = self.secrets.get('microsoft_defender_tenant_id')
        if not self.defender_tenant_id:
            logger.error("Microsoft Defender Tenant ID not found in secrets!")
            
        # Initialize Slack client
        slack_token = self.secrets.get('slack_api_token')
        if slack_token:
            logger.info("Initializing Slack client...")
            self.slack_client = SlackClient(slack_token)
        else:
            logger.error("Slack API token not found in secrets. Cannot initialize Slack client.")
            
        # Initialize Defender client
        client_id = self.secrets.get('microsoft_defender_client_id')
        client_secret = self.secrets.get('microsoft_defender_client_secret')
        
        if client_id and client_secret and self.defender_tenant_id:
            logger.info("Initializing Defender client...")
            self.defender_client = DefenderClient(
                client_id=client_id,
                client_secret=client_secret,
                tenant_id=self.defender_tenant_id
            )
        else:
            logger.error("Defender client credentials or Tenant ID missing in secrets.")
            
        self.initialized = True
    
    def send_error_notification(self, slack_channel: str, error_message: str) -> None:
        """
        Send an error notification to Slack.
        
        Args:
            slack_channel: Slack channel to send the notification to.
            error_message: Error message to include in the notification.
        """
        if not self.slack_client:
            logger.error("Cannot send error notification: Slack client not initialized.")
            return
            
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "❌ Microsoft Defender Vulnerability Error",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*Error processing Microsoft Defender vulnerabilities:*\n{error_message}"
                }
            }
        ]
        
        try:
            self.slack_client.post_message(slack_channel, "Microsoft Defender Vulnerability Error", blocks)
            logger.info(f"Sent error notification to Slack channel {slack_channel}")
        except Exception as e:
            logger.exception(f"Failed to send error notification to Slack: {e}")
    
    def get_vulnerabilities(self, hours_lookback: int, severity_filter: List[str]) -> Optional[List[Dict[str, Any]]]:
        """
        Get vulnerabilities from Microsoft Defender API.
        
        Args:
            hours_lookback: Number of hours to look back
            severity_filter: List of severity levels to include
            
        Returns:
            List of vulnerability objects or None if an error occurs.
        """
        if not self.defender_client:
            logger.error("Defender client not initialized!")
            return None
        
        # Convert severity filter to proper case for API (e.g., 'critical' -> 'Critical')
        formatted_severity_filter = [s.capitalize() for s in severity_filter]
        
        logger.info(f"Getting vulnerabilities from last {hours_lookback} hours with severity filter: {formatted_severity_filter}")
        vulnerabilities = self.defender_client.get_vulnerabilities(
            hours_lookback=hours_lookback,
            severity_filter=formatted_severity_filter
        )
        
        if vulnerabilities is None:
            logger.error("Failed to get vulnerabilities from Defender API")
            return None
        
        logger.info(f"Found {len(vulnerabilities)} vulnerabilities")
        return vulnerabilities
    
    def send_vulnerability_to_slack(self, vulnerability: Dict[str, Any], slack_channel: str) -> bool:
        """
        Send a vulnerability to Slack.
        
        Args:
            vulnerability: Vulnerability data
            slack_channel: Slack channel to send to
            
        Returns:
            True if successful, False otherwise
        """
        if not self.slack_client:
            logger.error("Slack client not initialized!")
            return False
        
        # Format the vulnerability for Slack
        message_blocks = format_vulnerability(vulnerability)
        
        # Send vulnerability to Slack
        response = self.slack_client.post_message(
            channel=slack_channel,
            blocks=message_blocks
        )
        
        # Check Slack API response
        if response and response.get("ok"):
            logger.info(f"Vulnerability sent successfully to Slack channel {slack_channel}.")
            return True
        else:
            error_msg = f"Failed to send vulnerability to Slack: {response}"
            logger.error(error_msg)
            return False
    
    def report_vulnerabilities(self, hours_lookback: int, severity_filter: List[str], slack_channel: str) -> Dict[str, Any]:
        """
        Report vulnerabilities to Slack.
        
        Args:
            hours_lookback: Number of hours to look back
            severity_filter: List of severity levels to include
            slack_channel: Slack channel to send to
            
        Returns:
            Dictionary with results summary
        """
        # Get vulnerabilities
        vulnerabilities = self.get_vulnerabilities(hours_lookback, severity_filter)
        
        if vulnerabilities is None:
            return {
                'statusCode': 500,
                'body': json.dumps({'message': 'Failed to get vulnerabilities from Defender API'})
            }
        
        if not vulnerabilities:
            logger.info("No vulnerabilities found matching criteria")
            return {
                'statusCode': 200,
                'body': json.dumps({'message': 'No vulnerabilities found matching criteria'})
            }
        
        # Send each vulnerability to Slack
        sent_count = 0
        for vulnerability in vulnerabilities:
            if self.send_vulnerability_to_slack(vulnerability, slack_channel):
                sent_count += 1
        
        result_message = f"Processed {len(vulnerabilities)} vulnerabilities, sent {sent_count} to Slack"
        logger.info(result_message)
        
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': result_message,
                'total': len(vulnerabilities),
                'sent': sent_count
            })
        }

# Create a global instance of the reporter
reporter = VulnerabilityReporter()

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """
    Lambda handler for reporting Microsoft Defender vulnerabilities.
    
    Args:
        event: Lambda event
        context: Lambda context object
        
    Returns:
        API Gateway proxy response (statusCode, body)
    """
    try:
        # Initialize reporter if not already done
        reporter.initialize()
        
        # Ensure clients are initialized
        if not reporter.defender_client:
            error_msg = "Defender client could not be initialized. Check secrets."
            logger.error(error_msg)
            return {'statusCode': 500, 'body': json.dumps({'message': error_msg})}
            
        if not reporter.slack_client:
            error_msg = "Slack client could not be initialized. Check secrets."
            logger.error(error_msg)
            return {'statusCode': 500, 'body': json.dumps({'message': error_msg})}

        # Get configuration
        slack_channel = Config.get_slack_channel()
        severity_filter = Config.get_severity_filter()
        hours_lookback = Config.get_hours_lookback()
        
        logger.info(f"Reporting vulnerabilities with severity filter: {severity_filter}, " +
                   f"hours lookback: {hours_lookback}, to channel: {slack_channel}")
        
        # Report vulnerabilities
        return reporter.report_vulnerabilities(hours_lookback, severity_filter, slack_channel)
        
    except Exception as e:
        logger.exception(f"Fatal error reporting vulnerabilities: {e}")
        # Return generic error
        return {
            'statusCode': 500,
            'body': json.dumps({'message': f'Internal server error: {str(e)}'})
        } 