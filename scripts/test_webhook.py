#!/usr/bin/env python3
"""
Test script for simulating Microsoft Defender webhook requests.
"""

import json
import os
import sys
import argparse
import uuid
from datetime import datetime, timezone

# Add src directory to the Python path
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(SCRIPT_DIR)
sys.path.insert(0, PROJECT_ROOT)

# Import Lambda handler
from src.functions.alert_processor import handler

def generate_test_alert(severity="high"):
    """
    Generate a test alert with the specified severity.
    
    Args:
        severity: Alert severity (critical, high, medium, low)
        
    Returns:
        Dictionary containing a sample alert
    """
    alert_id = str(uuid.uuid4())
    now = datetime.now(timezone.utc).isoformat().replace("+00:00", "Z")
    
    return {
        "id": alert_id,
        "title": f"Test {severity.capitalize()} Alert - Suspicious Activity",
        "alertSeverity": severity,
        "description": "This is a test alert generated by the test script.",
        "category": "TestCategory",
        "status": "New",
        "alertCreationTime": now,
        "machineId": f"test-machine-{uuid.uuid4().hex[:8]}",
        "firstEventTime": now,
        "lastEventTime": now,
        "resolvedTime": None,
        "incidentId": None,
        "threatFamilyName": "TestThreat",
        "mitreTechniques": ["T1566", "T1566.001"],
        "rbacGroupName": "TestGroup",
        "detectionSource": "TestSource"
    }

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Test Microsoft Defender webhook integration')
    parser.add_argument('--severity', choices=['critical', 'high', 'medium', 'low'], 
                        default='high', help='Alert severity')
    args = parser.parse_args()
    
    # Generate test alert
    alert = generate_test_alert(args.severity)
    
    # Create mock Lambda event
    event = {
        "body": json.dumps(alert),
        "requestContext": {
            "identity": {
                "sourceIp": "127.0.0.1"
            }
        }
    }
    
    # Set environment variables for testing
    os.environ['SLACK_CHANNEL'] = 'test-channel'
    os.environ['ENVIRONMENT'] = 'dev'
    
    # Print the test alert
    print(f"Sending test {args.severity} alert:")
    print(json.dumps(alert, indent=2))
    print("\n")
    
    # Call the Lambda handler
    print("Calling Lambda handler...")
    try:
        response = handler(event, None)
        print("\nLambda response:")
        print(json.dumps(response, indent=2))
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 