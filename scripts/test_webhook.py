#!/usr/bin/env python3
"""
Test script for simulating Microsoft Defender vulnerability reporting.
"""

import json
import os
import sys
import argparse
import uuid
from datetime import datetime, timezone, timedelta

# Add src directory to the Python path
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(SCRIPT_DIR)
sys.path.insert(0, PROJECT_ROOT)

# Import Lambda handler
from src.functions.vulnerability_reporter import handler

def generate_test_vulnerability(severity="high"):
    """
    Generate a test vulnerability with the specified severity.
    
    Args:
        severity: Vulnerability severity (critical, high, medium, low)
        
    Returns:
        Dictionary containing a sample vulnerability
    """
    cve_id = f"CVE-{datetime.now().year}-{uuid.uuid4().hex[:6]}"
    published_time = (datetime.now(timezone.utc) - 
                     timedelta(days=2)).isoformat().replace("+00:00", "Z")
    updated_time = datetime.now(timezone.utc).isoformat().replace("+00:00", "Z")
    
    cvss_score = 9.8 if severity == "critical" else 7.5 if severity == "high" else 5.0 if severity == "medium" else 3.2
    
    return {
        "id": cve_id,
        "name": f"Test {severity.capitalize()} Vulnerability - Security Issue",
        "severity": severity.capitalize(),
        "description": "This is a test vulnerability generated by the test script.",
        "cvssV3": cvss_score,
        "exposedMachines": 5,
        "publishedOn": published_time,
        "updatedOn": updated_time,
        "publicExploit": severity in ["critical", "high"],
        "exploitVerified": severity == "critical"
    }

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Test Microsoft Defender vulnerability reporting')
    parser.add_argument('--severity', choices=['critical', 'high', 'medium', 'low'], 
                        default='high', help='Vulnerability severity')
    args = parser.parse_args()
    
    # Generate test vulnerability
    vulnerability = generate_test_vulnerability(args.severity)
    
    # Set environment variables for testing
    os.environ['SLACK_CHANNEL'] = 'test-channel'
    os.environ['ENVIRONMENT'] = 'dev'
    os.environ['VULNERABILITY_SEVERITY_FILTER'] = 'critical,high,medium,low'
    os.environ['HOURS_LOOKBACK'] = '48'
    
    # Print the test vulnerability
    print(f"Testing with {args.severity} vulnerability:")
    print(json.dumps(vulnerability, indent=2))
    print("\n")
    
    # Mock the DefenderClient.get_vulnerabilities to return our test vulnerability
    from unittest.mock import patch
    
    # Call the Lambda handler with patch
    print("Calling Lambda handler with patched Defender client...")
    try:
        with patch('src.lib.defender_client.DefenderClient.get_vulnerabilities', 
                  return_value=[vulnerability]):
            response = handler({}, None)
            print("\nLambda response:")
            print(json.dumps(response, indent=2))
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 