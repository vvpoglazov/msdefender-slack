"""Tests for vulnerability_reporter.py Lambda function."""

import json
import os
import pytest
from unittest.mock import patch, MagicMock
from datetime import datetime, timedelta

from src.functions.vulnerability_reporter import handler, VulnerabilityReporter, Config

@pytest.fixture
def vulnerability_reporter_with_mocks(mock_secrets, mock_slack_client, mock_defender_client):
    """Create a VulnerabilityReporter instance with mocked dependencies."""
    with patch('src.functions.vulnerability_reporter.get_secrets', return_value=mock_secrets):
        with patch('src.functions.vulnerability_reporter.SlackClient', return_value=mock_slack_client):
            with patch('src.functions.vulnerability_reporter.DefenderClient', return_value=mock_defender_client):
                reporter = VulnerabilityReporter()
                reporter.initialize()
                yield reporter

@pytest.fixture
def sample_vulnerability():
    """Return a sample vulnerability dictionary."""
    return {
        'id': 'CVE-2023-12345',
        'name': 'Test Vulnerability',
        'severity': 'Critical',
        'cvssV3': 9.8,
        'description': 'This is a test vulnerability for unit testing',
        'exposedMachines': 5,
        'publishedOn': '2023-06-15T10:00:00Z',
        'updatedOn': '2023-06-16T14:30:00Z',
        'publicExploit': True
    }

@pytest.fixture
def sample_vulnerabilities(sample_vulnerability):
    """Return a list of sample vulnerabilities."""
    return [
        sample_vulnerability,
        {
            'id': 'CVE-2023-54321',
            'name': 'Another Vulnerability',
            'severity': 'High',
            'cvssV3': 7.5,
            'description': 'This is another test vulnerability',
            'exposedMachines': 3,
            'publishedOn': '2023-06-14T09:00:00Z',
            'updatedOn': '2023-06-15T11:20:00Z',
            'publicExploit': False
        }
    ]

def test_config_get_slack_channel():
    """Test Config.get_slack_channel()."""
    with patch.dict(os.environ, {'SLACK_CHANNEL': 'test-channel'}):
        assert Config.get_slack_channel() == 'test-channel'
    
    # Test default value
    with patch.dict(os.environ, {}, clear=True):
        assert Config.get_slack_channel() == 'security-alerts'

def test_config_get_severity_filter():
    """Test Config.get_severity_filter()."""
    with patch.dict(os.environ, {'VULNERABILITY_SEVERITY_FILTER': 'critical,high,medium'}):
        assert Config.get_severity_filter() == ['critical', 'high', 'medium']
    
    # Test default value
    with patch.dict(os.environ, {}, clear=True):
        assert Config.get_severity_filter() == ['high', 'critical']

def test_config_get_hours_lookback():
    """Test Config.get_hours_lookback()."""
    with patch.dict(os.environ, {'HOURS_LOOKBACK': '48'}):
        assert Config.get_hours_lookback() == 48
    
    # Test default value
    with patch.dict(os.environ, {}, clear=True):
        assert Config.get_hours_lookback() == 24
    
    # Test invalid value
    with patch.dict(os.environ, {'HOURS_LOOKBACK': 'invalid'}):
        assert Config.get_hours_lookback() == 24

def test_get_vulnerabilities(vulnerability_reporter_with_mocks, sample_vulnerabilities):
    """Test get_vulnerabilities method."""
    reporter = vulnerability_reporter_with_mocks
    
    # Configure mock
    reporter.defender_client.get_vulnerabilities.return_value = sample_vulnerabilities
    
    # Call the method
    result = reporter.get_vulnerabilities(hours_lookback=24, severity_filter=['critical', 'high'])
    
    # Verify the result
    assert result == sample_vulnerabilities
    
    # Verify the mock was called correctly
    reporter.defender_client.get_vulnerabilities.assert_called_once_with(
        hours_lookback=24,
        severity_filter=['Critical', 'High']
    )

def test_get_vulnerabilities_error(vulnerability_reporter_with_mocks):
    """Test get_vulnerabilities method when API returns an error."""
    reporter = vulnerability_reporter_with_mocks
    
    # Configure mock to return None (error condition)
    reporter.defender_client.get_vulnerabilities.return_value = None
    
    # Call the method
    result = reporter.get_vulnerabilities(hours_lookback=24, severity_filter=['critical', 'high'])
    
    # Verify the result
    assert result is None

@patch('src.functions.vulnerability_reporter.format_vulnerability')
def test_send_vulnerability_to_slack(mock_format_vulnerability, vulnerability_reporter_with_mocks, sample_vulnerability):
    """Test send_vulnerability_to_slack method."""
    reporter = vulnerability_reporter_with_mocks
    
    # Configure mocks
    mock_blocks = [{"type": "section", "text": {"type": "mrkdwn", "text": "Test block"}}]
    mock_format_vulnerability.return_value = mock_blocks
    reporter.slack_client.post_message.return_value = {"ok": True}
    
    # Call the method
    result = reporter.send_vulnerability_to_slack(sample_vulnerability, "test-channel")
    
    # Verify the result
    assert result is True
    
    # Verify the mocks were called correctly
    mock_format_vulnerability.assert_called_once_with(sample_vulnerability)
    reporter.slack_client.post_message.assert_called_once_with(
        channel="test-channel",
        blocks=mock_blocks
    )

@patch('src.functions.vulnerability_reporter.format_vulnerability')
def test_send_vulnerability_to_slack_error(mock_format_vulnerability, vulnerability_reporter_with_mocks, sample_vulnerability):
    """Test send_vulnerability_to_slack method when Slack API returns an error."""
    reporter = vulnerability_reporter_with_mocks
    
    # Configure mocks
    mock_blocks = [{"type": "section", "text": {"type": "mrkdwn", "text": "Test block"}}]
    mock_format_vulnerability.return_value = mock_blocks
    reporter.slack_client.post_message.return_value = {"ok": False, "error": "channel_not_found"}
    
    # Call the method
    result = reporter.send_vulnerability_to_slack(sample_vulnerability, "test-channel")
    
    # Verify the result
    assert result is False

def test_report_vulnerabilities(vulnerability_reporter_with_mocks, sample_vulnerabilities):
    """Test report_vulnerabilities method."""
    reporter = vulnerability_reporter_with_mocks
    
    # Configure mocks
    with patch.object(reporter, 'get_vulnerabilities', return_value=sample_vulnerabilities) as mock_get_vulnerabilities:
        with patch.object(reporter, 'send_vulnerability_to_slack', return_value=True) as mock_send:
            
            # Call the method
            result = reporter.report_vulnerabilities(24, ['critical', 'high'], 'test-channel')
            
            # Verify the result
            assert result['statusCode'] == 200
            assert json.loads(result['body'])['total'] == 2
            assert json.loads(result['body'])['sent'] == 2
            
            # Verify the mocks were called correctly
            mock_get_vulnerabilities.assert_called_once_with(24, ['critical', 'high'])
            assert mock_send.call_count == 2

def test_report_vulnerabilities_no_vulns(vulnerability_reporter_with_mocks):
    """Test report_vulnerabilities method when no vulnerabilities are found."""
    reporter = vulnerability_reporter_with_mocks
    
    # Configure mocks
    with patch.object(reporter, 'get_vulnerabilities', return_value=[]) as mock_get_vulnerabilities:
        
        # Call the method
        result = reporter.report_vulnerabilities(24, ['critical', 'high'], 'test-channel')
        
        # Verify the result
        assert result['statusCode'] == 200
        assert 'No vulnerabilities found' in json.loads(result['body'])['message']

def test_report_vulnerabilities_api_error(vulnerability_reporter_with_mocks):
    """Test report_vulnerabilities method when the API returns an error."""
    reporter = vulnerability_reporter_with_mocks
    
    # Configure mocks
    with patch.object(reporter, 'get_vulnerabilities', return_value=None) as mock_get_vulnerabilities:
        
        # Call the method
        result = reporter.report_vulnerabilities(24, ['critical', 'high'], 'test-channel')
        
        # Verify the result
        assert result['statusCode'] == 500
        assert 'Failed to get vulnerabilities' in json.loads(result['body'])['message']

@patch('src.functions.vulnerability_reporter.VulnerabilityReporter')
@patch('src.functions.vulnerability_reporter.Config')
def test_handler_success(mock_config, mock_reporter_class, vulnerability_reporter_with_mocks, sample_vulnerabilities):
    """Test handler function success path."""
    # Configure mocks
    mock_config.get_slack_channel.return_value = 'test-channel'
    mock_config.get_severity_filter.return_value = ['critical', 'high']
    mock_config.get_hours_lookback.return_value = 24
    
    mock_reporter_instance = MagicMock()
    mock_reporter_instance.report_vulnerabilities.return_value = {
        'statusCode': 200,
        'body': json.dumps({
            'message': 'Processed 2 vulnerabilities, sent 2 to Slack',
            'total': 2,
            'sent': 2
        })
    }
    
    mock_reporter_class.return_value = mock_reporter_instance
    
    # Call the handler
    with patch('src.functions.vulnerability_reporter.reporter', mock_reporter_instance):
        result = handler({}, {})
    
    # Verify the result
    assert result['statusCode'] == 200
    assert json.loads(result['body'])['total'] == 2
    
    # Verify the mocks were called correctly
    mock_reporter_instance.initialize.assert_called_once()
    mock_reporter_instance.report_vulnerabilities.assert_called_once_with(
        24, ['critical', 'high'], 'test-channel'
    )

@patch('src.functions.vulnerability_reporter.VulnerabilityReporter')
@patch('src.functions.vulnerability_reporter.Config')
def test_handler_exception(mock_config, mock_reporter_class):
    """Test handler function when an exception occurs."""
    # Configure mocks
    mock_config.get_slack_channel.return_value = 'test-channel'
    mock_config.get_severity_filter.return_value = ['critical', 'high']
    mock_config.get_hours_lookback.return_value = 24
    
    mock_reporter_instance = MagicMock()
    mock_reporter_instance.initialize.side_effect = Exception("Test exception")
    
    mock_reporter_class.return_value = mock_reporter_instance
    
    # Call the handler
    with patch('src.functions.vulnerability_reporter.reporter', mock_reporter_instance):
        result = handler({}, {})
    
    # Verify the result
    assert result['statusCode'] == 500
    assert 'Test exception' in json.loads(result['body'])['message']

def test_handler_no_defender_client(vulnerability_reporter_with_mocks):
    """Test handler function when defender client is not initialized."""
    # Configure mock
    with patch('src.functions.vulnerability_reporter.reporter') as mock_reporter:
        mock_reporter.initialize.return_value = None
        mock_reporter.defender_client = None
        
        # Call the handler
        result = handler({}, {})
        
        # Verify the result
        assert result['statusCode'] == 500
        assert 'Defender client could not be initialized' in json.loads(result['body'])['message']

def test_handler_no_slack_client(vulnerability_reporter_with_mocks):
    """Test handler function when slack client is not initialized."""
    # Configure mock
    with patch('src.functions.vulnerability_reporter.reporter') as mock_reporter:
        mock_reporter.initialize.return_value = None
        mock_reporter.defender_client = MagicMock()
        mock_reporter.slack_client = None
        
        # Call the handler
        result = handler({}, {})
        
        # Verify the result
        assert result['statusCode'] == 500
        assert 'Slack client could not be initialized' in json.loads(result['body'])['message'] 